apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: "${rootProject.getRootDir().getAbsolutePath()}/script/testlib.gradle"
def srcDirs=[]
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14"
                abiFilters "arm64-v8a", "armeabi-v7a","x86","x86_64"
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
            //path 'src/main/cpp/CMakeLists.txt'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }
    sourceSets {
        main {
            java.excludes = [
                    '**/build/**',
            ]
            srcDirs.forEach {
                assets.srcDirs += "$projectDir/$it/main/assets"
                aidl.srcDirs += "$projectDir/$it/main/aidl"
                res.srcDirs += "$projectDir/$it/main/res"
                java.srcDirs += "$projectDir/$it/main/java"
                jni.srcDirs +=  "$projectDir/$it/main/jni"
                jniLibs.srcDirs +=  "$projectDir/$it/main/jniLibs"

            }
        }
        androidTest {
            srcDirs.forEach {
                assets.srcDirs += "$projectDir/$it/androidTest/assets"
                aidl.srcDirs += "$projectDir/$it/androidTest/aidl"
                res.srcDirs += "$projectDir/$it/androidTest/res"
                java.srcDirs += "$projectDir/$it/androidTest/java"
            }
        }
        test {
            srcDirs.forEach {
//                res.srcDirs += "$projectDir/$it/test/resources"
                java.srcDirs += "$projectDir/$it/test/java"
            }

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.21-2"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.annotation:annotation:1.1.0"
    compileOnly project(path : ':yposedstub')
    api project(path: ':common')
}
//afterEvaluate {
//    project.android.libraryVariants.each { LibraryVariant variant ->
//        variant.javaCompile.doFirst { JavaCompile javaCompile ->
//            String projectAndroidStubPath = project.project(':yposedstub').projectDir.canonicalPath
////            println "projectAndroidStubPath: ${projectAndroidStubPath}"
//            File stubPath = javaCompile.classpath.find {
//                it.canonicalPath.startsWith(projectAndroidStubPath)
//            }
//            if (stubPath == null) {
//                throw new RuntimeException("reset bootclasspath error.")
//            }
//
////            javaCompile.options.setBootstrapClasspath(Joiner.on(File.pathSeparator).join(stubPath, javaCompile.options.bootstrapClasspath))
//        }
//    }
//}
